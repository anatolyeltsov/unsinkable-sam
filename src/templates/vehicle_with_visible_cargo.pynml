<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
    spriteset(${ship.id}_ss_empty_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
        spriteset_template_empty_${ship.id}(
            ${int(spritelayer.layer_num) * 300}
            + 10
        )
    }
    spriteset(${ship.id}_ss_cabbage_loading_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
        spriteset_template_part_load_${ship.id}(
            ${int(spritelayer.layer_num) * 300}
            + 110
        )
    }
    spriteset(${ship.id}_ss_cabbage_loaded_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
        spriteset_template_full_load_${ship.id}(
            ${int(spritelayer.layer_num) * 300}
            + 210
        )
    }
    <!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates
          !! controvs, but HOW ABOUT A PROCEDURE??
          - check for percent loaded and return 0, 1, or 2 depending on the state
    -->
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_cabbage_percent_loaded_${spritelayer.layer_num}, cargo_count*100/cargo_capacity) {
            0: return ${ship.id}_ss_empty_${spritelayer.layer_num};
            1..99: return ${ship.id}_ss_cabbage_loading_${spritelayer.layer_num};
        return ${ship.id}_ss_cabbage_loaded_${spritelayer.layer_num};
    }
</tal:layers>

<!--! cargo_variants_layer_0_only -->
<tal:cargo_variants repeat="cargo_variant_num python:range(ship.gestalt_graphics.num_cargo_sprite_variants)">
    <!--! to avoid excess nml generation, cargo must all be handled in layer 0 as of August 2023
          this may or may not be a worthwhile optimisation
          if a case arises in future for cargo in other layers, cross that bridge then
    -->
    <!--! !!!! the support for layers is incomplete as of August 2023 - as only one layer is used for ships with visible cargo
        - we won't want to repeat all the cargo rows, only the empty ones
        - but we do need to know the load state to place the overlay accurately
        - the spritesheet format needs determined
            - definitely needs to be done in the empty row
        - the spriteset calculation needs to figure out a y_offset
        - the graphics generator doesn't handle layers for this gestalt
    -->
    spriteset(${ship.id}_ss_${cargo_variant_num}_part_load, "${global_constants.graphics_path}${ship.id}.png") {
        spriteset_template_part_load_${ship.id}(
            ${len(ship.gestalt_graphics.spritelayers) * 300}
            + (${cargo_variant_num * 200})
            + 10
        )
    }
    spriteset(${ship.id}_ss_${cargo_variant_num}_full_load, "${global_constants.graphics_path}${ship.id}.png") {
        spriteset_template_full_load_${ship.id}(
            ${len(ship.gestalt_graphics.spritelayers) * 300}
            + (${cargo_variant_num * 200})
            + 110
        )
    }
    <!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates
          !! controvs, but HOW ABOUT A PROCEDURE??
          - check for percent loaded and return 0, 1, or 2 depending on the state
    -->
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_percent_loaded_${cargo_variant_num}, cargo_count*100/cargo_capacity) {
            0: return ${ship.id}_ss_empty_0;
            1..99: return ${ship.id}_ss_${cargo_variant_num}_part_load;
        return ${ship.id}_ss_${cargo_variant_num}_full_load;
    }
</tal:cargo_variants>

switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_cargo_type, cargo_type_in_veh) {
    <tal:cargos repeat="mapping ship.gestalt_graphics.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            <!--! !!!!! could likely refactor cargo_row_map to return only the row number, not a list of random candidates
                        Horse dropped the randomisation-per-cargo as overkill
                        for Sam, it appears to be unused
            -->
            ${mapping[0]}: return ${ship.id}_switch_graphics_percent_loaded_${mapping[1][0]};
        </tal:exclude_default_cargo>
    </tal:cargos>
    return ${ship.id}_switch_graphics_percent_loaded_${ship.gestalt_graphics.generic_rows[0]};
}
<!--! end cargo_variants_layer_0_only -->

<tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}, vehicle_type_id) {
        <tal:ship_variants repeat="ship_variant ship.resolve_buyable_variants()">
            ${ship_variant.numeric_id}: return switch_colour_mapping(${ship_variant.get_recolour_strategy_params(spritelayer)});
        </tal:ship_variants>
    }
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_layer_${spritelayer.layer_num}, STORE_TEMP(
            CB_FLAG_MORE_SPRITES | ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}(), 0x100
        )) {
        <tal:only_layer_0_has_cargo_sprites condition="spritelayer.layer_num == 0">
            return ${ship.id}_switch_graphics_cargo_type;
        </tal:only_layer_0_has_cargo_sprites>
        <tal:other_layers condition="spritelayer.layer_num != 0">
            return ${ship.id}_switch_graphics_cabbage_percent_loaded_${spritelayer.layer_num};
        </tal:other_layers>
    }
</tal:layers>

switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_ship, getbits(extra_callback_info1, 8, 8)) {
    <tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
        ${spritelayer.layer_num}: ${ship.id}_switch_graphics_layer_${spritelayer.layer_num};
    </tal:layers>
    <!--! we'll only chain here from non-wake layers, so no need to handle the default case -->
}


<!--! purchase menu handling -->
<tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
    <!--! !!!! the support for layers is incomplete as of August 2023 - as only one layer is used for ships with visible cargo
        - we won't want to repeat all the cargo rows, only the empty ones
        - but we do need to know the load state to place the overlay accurately
        - the spritesheet format needs determined
        - the spriteset calculation needs to figure out a y_offset
        - the graphics generator doesn't handle layers for this gestalt
    -->
    spriteset(${ship.id}_ss_purchase_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_purchase_${ship.id}(0)
    }
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_purchase_setup_spritelayer_${spritelayer.layer_num},
        STORE_TEMP(
            <tal:more_sprites condition="not: repeat.spritelayer.end">
                CB_FLAG_MORE_SPRITES |
            </tal:more_sprites>
            ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}(), 0x100
            )
        ) {
        return ${ship.id}_ss_purchase_${spritelayer.layer_num};
    }
</tal:layers>
switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
    <tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
        ${spritelayer.layer_num}: ${ship.id}_switch_graphics_purchase_setup_spritelayer_${spritelayer.layer_num};
    </tal:layers>
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: speed.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />

