<!--!
    liveries mapped to cargos, but no support here for load states, just one sprite per cargo
    e.g. tankers with black for oil, cc for chemicals, grey for petrol etc.
-->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:cargo_variants repeat="cargo_variant_num python:range(ship.gestalt_graphics.num_cargo_sprite_variants)">
    spriteset(${ship.id}_ss_${cargo_variant_num}_empty, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_empty_${ship.id}(${cargo_variant_num * 300} + 10)
    }
    spriteset(${ship.id}_ss_${cargo_variant_num}_part_load, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_part_load_${ship.id}(${cargo_variant_num * 300} + 110)
    }
    spriteset(${ship.id}_ss_${cargo_variant_num}_full_load, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_full_load_${ship.id}(${cargo_variant_num * 300} + 210)
    }
    <!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates -->
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_percent_loaded_${cargo_variant_num}, cargo_count*100/cargo_capacity) {
            0: return ${ship.id}_ss_${cargo_variant_num}_empty;
            1..99: return ${ship.id}_ss_${cargo_variant_num}_part_load;
        return ${ship.id}_ss_${cargo_variant_num}_full_load;
    }
</tal:cargo_variants>

<!--! this triggers random on a new load, which was designed for use specifically with containers where colours are randomised on load
      it's not necessary for e.g. tankers, which only have livery one option per cargo -->
<tal:cargo_random_switches repeat="mapping ship.gestalt_graphics.cargo_row_map.items()">
    random_switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_${mapping[0]}, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
        <tal:random_graphics_variations repeat="spriterow_num mapping[1]">
            1: return ${ship.id}_switch_graphics_percent_loaded_${spriterow_num};
        </tal:random_graphics_variations>
    }
</tal:cargo_random_switches>

switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_ship, cargo_type_in_veh) {
    <tal:cargos repeat="mapping ship.gestalt_graphics.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            ${mapping[0]}: return ${ship.id}_switch_graphics_${mapping[0]};
        </tal:exclude_default_cargo>
    </tal:cargos>
    <tal:default_cargo repeat="mapping ship.gestalt_graphics.cargo_row_map.items()">
        <tal:block condition="mapping[0] == 'DFLT'">
            return ${ship.id}_switch_graphics_${mapping[0]};
        </tal:block>
    </tal:default_cargo>
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: speed.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />

