<!--!
    supports:
    - simple recolouring of body at vehicle compile time
    - in-game recolour via recolour sprites (handled in colour mapping)
-->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

spriteset(${ship.id}_ss_empty, "${global_constants.graphics_path}${ship.id}.png") {
  spriteset_template_empty_${ship.id}(10)
}
spriteset(${ship.id}_ss_part_load, "${global_constants.graphics_path}${ship.id}.png") {
  spriteset_template_part_load_${ship.id}(110)
}
spriteset(${ship.id}_ss_full_load, "${global_constants.graphics_path}${ship.id}.png") {
  spriteset_template_full_load_${ship.id}(210)
}
<!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates w.r.t which load % triggers which state -->
switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_ship, cargo_count*100/cargo_capacity) {
        0: return ${ship.id}_ss_empty;
        1..99: return ${ship.id}_ss_part_load;
    return ${ship.id}_ss_full_load;
}

<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: speed.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />

