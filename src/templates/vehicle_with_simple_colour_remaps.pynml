<!--!
    supports:
    - simple recolouring of body at vehicle compile time
    - in-game recolour via recolour sprites (handled in colour mapping)
-->

<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
    spriteset(${ship.id}_ss_empty_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_empty_${ship.id}((${spritelayer.layer_num} * 300) + 10)
    }
    spriteset(${ship.id}_ss_part_load_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_part_load_${ship.id}((${spritelayer.layer_num} * 300) + 110)
    }
    spriteset(${ship.id}_ss_full_load_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
      spriteset_template_full_load_${ship.id}((${spritelayer.layer_num} * 300) + 210)
    }
    <!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates w.r.t which load % triggers which state -->
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_load_amount_${spritelayer.layer_num}, cargo_count*100/cargo_capacity) {
            0: return ${ship.id}_ss_empty_${spritelayer.layer_num};
            1..99: return ${ship.id}_ss_part_load_${spritelayer.layer_num};
        return ${ship.id}_ss_full_load_${spritelayer.layer_num};
    }
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}, vehicle_type_id) {
        <tal:ship_variants repeat="ship_variant ship.resolve_buyable_variants()">
            ${ship_variant.numeric_id}: return switch_colour_mapping(${ship_variant.get_recolour_strategy_params(spritelayer)});
        </tal:ship_variants>
    }
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_layer_${spritelayer.layer_num}, STORE_TEMP(
            CB_FLAG_MORE_SPRITES | ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}(), 0x100
        )) {
        return ${ship.id}_switch_graphics_load_amount_${spritelayer.layer_num};
    }
</tal:layers>


switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_ship, getbits(extra_callback_info1, 8, 8)) {
    <tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
        ${spritelayer.layer_num}: ${ship.id}_switch_graphics_layer_${spritelayer.layer_num};
    </tal:layers>
    <!--! we'll only chain here from non-wake layers, so no need to handle the default case -->
}

<!--! purchase menu handling -->
<tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
    spriteset(${ship.id}_ss_purchase_${spritelayer.layer_num}, "${global_constants.graphics_path}${ship.id}.png") {
        <!--! !! nasty shim to get y_offset -->
        spriteset_template_purchase_${ship.id}(${spritelayer.layer_num * graphics_constants.spriterow_height * 3})
    }
    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_purchase_setup_spritelayer_${spritelayer.layer_num},
        STORE_TEMP(
            <tal:more_sprites condition="not: repeat.spritelayer.end">
                CB_FLAG_MORE_SPRITES |
            </tal:more_sprites>
            ${ship.id}_switch_graphics_get_recolour_palette_${spritelayer.layer_num}(), 0x100
            )
        ) {
        return ${ship.id}_ss_purchase_${spritelayer.layer_num};
    }
</tal:layers>
switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
    <tal:layers repeat="spritelayer ship.gestalt_graphics.spritelayers">
        ${spritelayer.layer_num}: ${ship.id}_switch_graphics_purchase_setup_spritelayer_${spritelayer.layer_num};
    </tal:layers>
}


<tal:include metal:use-macro="load: graphics_entry_switches.pynml" />

<tal:include metal:use-macro="load: speed.pynml" />

<tal:include metal:use-macro="load: capacity.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />

